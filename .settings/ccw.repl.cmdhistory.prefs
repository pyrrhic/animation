cmdhistory=["(reset)" "(run-on-main-thread (set-main-screen))" "(use 'animation.desktop-launcher \:reload)" "(rr ss)" "(reset)" "(\:aa (\:hi \\"test\\"))" "(empty? {})" "(use 'animation.main-screen \:reload)" "(reset)" "(defn init-tex-cache \\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle00\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(defn init-tex-cache \\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\n    atlas))" "(let [a \\"hu\\"])" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle00\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(ns animation.main-screen)" "(defn create-animation-c [animation-textures should-loop]\\r\\n  \\"Creates an animation component.\\"\\r\\n  (assoc {}\\r\\n         \:name \\"animation\\"\\r\\n         \:animated animation-textures\\r\\n         \:current-frame -1 ;using negative 1 as a way to indicate that this animation has no started.\\r\\n         \:current-duration 0.0\\r\\n         \:loop should-loop\\r\\n         \:rotation -1))" "(defn create-player [tex-cache]\\r\\n  (assoc {}\\r\\n         \:tag \\"player\\"\\r\\n         \:animation (create-animation-c (\:pistol-idle tex-cache) true)))" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle00\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(type 0.0)" "(type 0.0f)" "(ns animation.desktop-launcher)" "(use 'animation.main-screen \:reload)" "(ns animation.main-screen)" "(defn render-s [{entities \:entities batch \:batch} game]\\r\\n  (.begin batch)\\n  (loop [ents entities]\\n    (when-let [renderable (not (nil? (\:renderable ents)))]\\n      (.draw batch (\:texture renderable) (float (\:x renderable)) (float (\:y renderable))))\\n    (recur (rest ents)))\\r\\n  (.end batch)\\n  game)" "(use 'animation.main-screen \:reload)" "(ns animation.desktop-launcher)" "(reset)" "(ns animation.main-screen)" "(animation.desktop-launcher/reset)" "game" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(defn create-player [tex-cache]\\n  (assoc {}\\n         \:renderable (create-renderable-c (first (\:pistol-idle tex-cache)))))" "game" "(use 'animation.main-screen \:reload)" "(create-pistoleer (first (\:pistol-idle (\:tex-cache game))))" "(\:tex-cache game)" "game" "(animation.desktop-launcher/reset)" "game" "(create-pistoleer (first (\:pistol-idle (\:tex-cache game))))" "game" "(\:tex-cache game)" "(\:pistol-idle (\:tex-cache game))" "(first (\:pistol-idle (\:tex-cache game)))" "(create-pistoleer (first (\:pistol-idle (\:tex-cache game))))" "(create-pistoleer (\:tex-cache game))" "(update-game\!\\n  (fn [game]\\n    (assoc game \\n           \:entities [(create-pistoleer (\:tex-cache game))])))" "(use 'animation.main-screen)" "(defn game-loop [game delta]\\n  (clear-screen)\\n  (render-s game))" "(defn game-loop [game delta]\\r\\n     (clear-screen)\\r\\n     (render-s game))" "(ns animation-main-screen)" "(defn game-loop [game delta]\\r\\n     (clear-screen)\\r\\n     (render-s game))" "(ns animation.main-screen)" "(defn game-loop [game delta]\\r\\n     (clear-screen)\\r\\n     (render-s game))" "game" "(ns animation.main-screen)" "game" "(ns animation.main-screen)" "game" "(\:entities game)" "(first (\:entities game))" "(assoc-in (first (\:entities game)) [\:renderable \:x] 50)" "(assoc-in game [\:entities 0 \:renderable \:x] 50)" "(update-game\! (fn [g] (assoc-in (first (\:entities g)) [\:renderable \:x] 50)))" "(ns animation.main-screen)" "(update-game\! \#((assoc-in % [\:entities 0 \:renderable \:x] 50)))" "(update-game\! (fn [g] (assoc-in g [\:entities 0 \:renderable \:x] 50)))" "game" "(update-game\! (fn [g] (assoc-in g [\:entities 0 \:renderable \:y] 50)))" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(ns animation.main-screen)" "game" "(\:entities game)" "(use animation.main-screen \:reload)" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(float 50)" "game" "(ns animation.main-screen)" "game" "(\:renderable (first (\:entities game)))" "(\:x (\:renderable (first (\:entities game))))" "(float (\:x (\:renderable (first (\:entities game)))))" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(ns animation.main-screen)" "game" "(\:tex-cache game)" "(conj [1 2 3] 4)" "(let [e {\:current-duration 1}]\\n  (assoc e\\n         \:current-duration (inc (\:current-duration e))))" "(mod 1 3)" "(mod 0 3)" "(mod 2 3)" "(mod 3 3)" "(if-let [e (first (\:entities game))\\r\\n         animation (\:animation e)\\r\\n         renderable (\:renderable e)]\\r\\n)" "(if-let [e (first (\:entities game))\\r\\n         animation (\:animation e)\\r\\n         renderable (\:renderable e)]\\r\\ne)" "(if-let [e (first (\:entities game))]\\r\\ne)" "(if-let [e (first (\:entities game))\\n         a (first (\:entities game))]\\r\\ne)" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      animation)))" "(ns animation.main-screen)" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      animation)))" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      (cond \\n        (neg? (\:current-frame animation)) \\n          (assoc animation\\n                 \:current-frame 0)))))" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      (cond \\n        (neg? (\:current-frame animation)) \\n          (assoc animation\\n                 \:current-frame 0)\\n        (> 0 (\:current-duration animation))\\n          (assoc animation\\n                 \:current-duration 1)\\n          ))))" "game" "(assoc-in [\:entities 0 \:animation \:current-frame] 0)" "(assoc-in game [\:entities 0 \:animation \:current-frame] 0)" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      (cond \\n        (neg? (\:current-frame animation)) \\n          (assoc animation\\n                 \:current-frame 0)\\n        (> 0 (\:current-duration animation))\\n          (assoc animation\\n                 \:current-duration 1)\\n          ))))" "game" "(update-game\! \#(assoc-in % [\:entities 0 \:animation \:current-frame] 0))" "game" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc animation\\r\\n                 \:current-frame 0)\\r\\n        (> 0 (\:current-duration animation))\\r\\n          (assoc animation\\r\\n                 \:current-duration 1)\\r\\n          ))))" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc animation\\r\\n                 \:current-frame 0)\\r\\n        (>\= 0 (\:current-duration animation))\\r\\n          (assoc animation\\r\\n                 \:current-duration 1)\\r\\n          ))))" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc-in game [\:entities 0 \:animation \:current-frame] 0)\\r\\n        (>\= 0 (\:current-duration animation))\\r\\n          (assoc-in game [\:entities 0 \:animation \:current-duration] 1)\\r\\n          ))))" "(update-game\! \#(assoc-in % [\:entities 0 \:animation \:current-duration] 0))" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc-in game [\:entities 0 \:animation \:current-frame] 0)\\r\\n        (>\= 0 (\:current-duration animation))\\r\\n          (assoc-in game [\:entities 0 \:animation \:current-duration] 1)\\r\\n          ))))" "(loop [ents (\:entities game)\\n       updated-ents []]\\n  (if (empty? ents)\\n    updated-ents\\n    (let [e (first (ents))]\\n      (if-let [animation (\:animation e)]\\n        (if-let [renderable (\:renderable e)]\\n          (cond\\n            (neg? (\:current-frame animation))\\n              (recur (rest ents)\\n                     (conj updated-ents\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\n            (<\= 0 (\:current-duration animation))\\n              (recur (rest ents)\\n                     (conj updated-ents\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\n                                       [\:animation \:current-duration] \\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(\:entities game)" "(ns animation.main-screen)" "(\:entities game)" "(loop [ents entities\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents) nil)\\r\\n;                     (conj updated-ents\\r\\n;                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents) nil)))))))\\r\\n;                     (conj updated-ents\\r\\n;                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n;                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n;                                       [\:animation \:current-duration] \\r\\n;                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)])))))" "(let [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)])))))" "(let [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)] e)))))" "(let [ents (\:entities game)\\n      updated-ents []]\\n  ents)" "(let [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)] e)))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "game" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(update-game\! \#(assoc-in % [\:entities 0 \:animation \:current-frame] 0))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) new-frame-num)))))))))))" "(nth [0 1 2 3] 1)" "0, 1" "(ns animation.main-screen)" "game" "(get \:idle [\:idle \:not-idle])" "(get 0 [\:idle \:not-idle])" "(get 1 [\:idle \:not-idle])" "(get [\:idle \:not-idle] \:idle)" "(get [\:idle \:not-idle] 0)" "(get \#{\:idle \:shooting} 0)" "(get \#{\:idle \:shooting} \:idle)" "(repeatedly 5 (assoc {} \\n                     \:renderable {} \\n                     \:animation {} \\n                     \:state (if (< (rand-int 100) 50)\\n                              \:idle\\n                              \:shooting)))" "(repeatedly 5 \#(assoc {} \\n                     \:renderable {} \\n                     \:animation {} \\n                     \:state (if (< (rand-int 100) 50)\\n                              \:idle\\n                              \:shooting)))" "(repeatedly 5 \#(assoc {} \\n                     \:state (if (< (rand-int 100) 50)\\n                              \:idle\\n                              \:shooting)))" "(\= \:idle \:idle)" "(\= \:idle \:idl)" "(\= \:idle \\"idle\\")" "(\= \:idle \\"\:idle\\")" "(filter \#((\= (\:state %) \:idle)) \\r\\n        (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))" "(filter (fn [e] (\= (\:state e) \:idle))\\r\\n        (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))" "(conj [] \\n      (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n      (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n        (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))" "(time (conj [] \\n            (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n            (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))))" "(time (conj [] \\n            (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 10000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n            (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 10000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))))" "(time (conj [] \\n            (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n            (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n      [])" "(time (fn [] (conj [] \\n                   (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n                   (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 10 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n        []))" "(time (fn [] (conj [] \\n                   (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 10000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n                   (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 10000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n        []))" "(time (do (conj [] \\n                (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 10000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n                (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 10000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n        []))" "(time (do (conj [] \\n                (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n                (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n        []))" "(let [one (future (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n      two (future (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))]\\n  (time (conj [] one two))\\n  [])" "(let [one (future (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n      two (future (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))]\\n  (time (conj [] @one @two))\\n  [])" "(let [ents (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))\\n      one (future (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  ents))\\n      two (future (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  ents))]\\n  (time (conj [] @one @two))\\n  [])" "(let [one (future (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))\\n      two (future (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))))]\\n  (time (conj [] @one @two))\\n  [])" "(let [ents (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))\\n      one (future (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  ents))\\n      two (future (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  ents))]\\n  (time (conj [] @one @two))\\n  [])" "(let [ents (future (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))\\n      one (future (filterv (fn [e] (not\= (\:state e) \:idle))\\r\\n                  @ents))\\n      two (future (filterv (fn [e] (\= (\:state e) \:idle))\\r\\n                  @ents))]\\n  (time (conj [] @one @two))\\n  [])" "(time (loop [ents (future (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))]\\n        (recur (rest ents))))" "(loop [ents (future (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting))))]\\n  (recur (rest ents)))" "(loop [ents (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))]\\n  (recur (rest ents)))" "(ns animation.main-screen)" "(loop [ents (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))]\\n  (if (empty? ents)\\n    nil\\n    (recur (rest ents))))" "(loop [ents (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))\\n       result []]\\n  (if (empty? ents)\\n    nil\\n    (if (\= (\:state (first ents)) \:idle)\\n      (recur (rest ents) (conj result (first ents)))\\n      (recur (rest ents) (conj result (first ents))))))" "(time (loop [ents (repeatedly 1000000 \#(assoc {} \:state (if (< (rand-int 100) 50) \:idle \:shooting)))\\n             result []]\\n        (if (empty? ents)\\n          nil\\n          (if (\= (\:state (first ents)) \:idle)\\n            (recur (rest ents) (conj result (first ents)))\\n            (recur (rest ents) (conj result (first ents)))))))" "(conj [] '(1 2 3))" "(conj [] (1 2 3))" "(defn pick-animation-s [{entities \:entities}]\\n  (let [idle (filter (fn [e] (\= (\:state e) \:idle)) entities)\\n        shooting (filter (fn [e] (\= (\:state e) \:shooting)) entities)]\\n    (conj [] idle shooting)))" "(pick-animation-s game)" "(defn pick-animation-s [{entities \:entities}]\\n  (let [idle (filterv (fn [e] (\= (\:state e) \:idle)) entities)\\n        shooting (filterv (fn [e] (\= (\:state e) \:shooting)) entities)]\\n    (conj [] idle shooting)))" "(pick-animation-s game)" "(conj [] [1 2 3] [4 5 6])" "(conj [1 2 3] [4 5 6])" "(concat [1 2 3] [4 5 6])" "(defn pick-animation-s [{entities \:entities}]\\n  (let [idle (filterv (fn [e] (\= (\:state e) \:idle)) entities)\\n        shooting (filterv (fn [e] (\= (\:state e) \:shooting)) entities)]\\n    (vec (concat idle shooting))))" "(pick-animation-s game)" " (use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" " (use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(pistoleer-entity game)" "(init-game)" "game" "(update-game\! (fn [g] (assoc-in g [\:entities] (pistoleer-entity g))))" "game" "(ns animation.main-screen)" "game" "(use 'animation.main.screen \:reload)" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(defn render-system [game]\\r\\n  (let [{entities \:entities batch \:batch} game]\\r\\n\\t  (loop [ents entities]\\r\\n\\t    (if (empty? ents)\\r\\n\\t      nil\\r\\n\\t      (if-let [renderable (\:renderable (first ents))]\\r\\n         (let [transform (\:transform (first ents))]\\r\\n           \\"hu\\"\\r\\n           (recur (rest ents)))\\r\\n         (recur (rest ents)))))\\r\\n  game))" "(defn render-system [game]\\r\\n  (let [{entities \:entities batch \:batch} game]\\r\\n\\t  (loop [ents entities]\\r\\n\\t    (if (empty? ents)\\r\\n\\t      nil\\r\\n\\t      (if-let [renderable (\:renderable (first ents))]\\r\\n         (let [transform (\:transform (first ents))]\\r\\n           (println \\"hi\\")\\r\\n           (recur (rest ents)))\\r\\n         (recur (rest ents))))))\\r\\n  game)" "(defn render-system [game]\\r\\n  (let [{entities \:entities batch \:batch} game]\\r\\n\\t  (loop [ents entities]\\r\\n\\t    (if (empty? ents)\\r\\n\\t      nil\\r\\n\\t      (if-let [renderable (\:renderable (first ents))]\\r\\n         (print \\"hui\\")\\r\\n         (recur (rest ents))))))\\r\\n  game)" "(defn render-system [game]\\r\\n  (let [{entities \:entities batch \:batch} game]\\r\\n\\t  (loop [ents entities]\\r\\n\\t    (if (empty? ents)\\r\\n\\t      (print \\"empty\\")\\r\\n\\t      (if-let [renderable (\:renderable (first ents))]\\r\\n         (print \\"hui\\")\\r\\n         (recur (rest ents))))))\\r\\n  game)" "\\r\\n  (let [{entities \:entities batch \:batch} game]\\r\\n\\t  (loop [ents entities]\\r\\n\\t    (if (empty? ents)\\r\\n\\t      nil\\r\\n\\t      (if-let [renderable (\:renderable (first ents))]\\r\\n         (let [transform (\:transform (first ents))]\\r\\n           (println \\"hi\\")\\r\\n           (recur (rest ents)))\\r\\n         (recur (rest ents))))))" "(let [{entities \:entities batch \:batch} game]\\n  entities)" "(let [{entities \:entities batch \:batch} game]\\r\\n   \\t  (loop [ents entities]\\r\\n   \\t    (if (empty? ents)\\r\\n   \\t      nil\\n          (let [hi (println \\"h\\")]\\n            (recur (rest ents))))))" "(\:entities game)" "game" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(\= [] [1 2 3])" "(\= [1 2 3] [1 2 3])" "(defn render-system [{entities \:entities batch \:batch \:as game}]\\r\\n\\t(.begin batch)\\r\\n\\t(loop [ents entities]\\r\\n\\t  (if (empty? ents)\\r\\n\\t    nil\\r\\n\\t    (if-let [renderable (\:renderable (first ents))]\\r\\n\\t     (let [transform (\:transform (first ents))]\\r\\n\\t       (.draw batch renderable (float (\:x transform)) (float (\:y transform)) (float 64) (float 128))\\r\\n\\t       (recur (rest ents)))\\r\\n\\t     (recur (rest ents)))))\\r\\n\\t(.end batch)\\r\\n  game)" "(ns animation.main-screen)" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(def z \:hi)" "(z {\:hi \\"hi\\"})" "game" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(\:tex-and-durs (\:animations (first (\:entities game))))" "(\:is-playing (\:animations (first (\:entities game))))" "(def ents (filter (fn [ent] (and (\:renderable ent) (\:animation ent))) (\:entities game)))" "ents" "(\:entities game)" "(animation.desktop-launcher/reset)" "game" "(animations-component {\:pistol-idle (\:pistol-idle tex-cache)\\r\\n                                            \:pistol-fire (\:pistol-fire tex-cache)})" "(animations-component {\:pistol-idle (\:pistol-idle (\:tex-cache game))\\r\\n                                            \:pistol-fire (\:pistol-fire (\:tex-cache game))})" "(second (\:pistol-idle (animations-component {\:pistol-idle (\:pistol-idle (\:tex-cache game))\\r\\n                                            \:pistol-fire (\:pistol-fire (\:tex-cache game))})))" "(\:pistol-idle (animations-component {\:pistol-idle (\:pistol-idle (\:tex-cache game))\\r\\n                                            \:pistol-fire (\:pistol-fire (\:tex-cache game))}))" "{\:pistol-idle (\:pistol-idle (\:tex-cache game))\\n \:pistol-fire (\:pistol-fire (\:tex-cache game))}" "(\:pistol-idle {\:pistol-idle (\:pistol-idle (\:tex-cache game))\\n               \:pistol-fire (\:pistol-fire (\:tex-cache game))})" "(second (\:pistol-idle {\:pistol-idle (\:pistol-idle (\:tex-cache game))\\n                       \:pistol-fire (\:pistol-fire (\:tex-cache game))}))" "(animation.desktop-launcher/reset)" "game" "(animation.desktop-launcher/reset)" "game" "(pistoleer-entity game)" "(use 'animation.main-screen \:reload)" "(pistoleer-entity game)" "(animation.desktop-launcher/reset)" "game" "(filter (fn [ent] (and (\:renderable ent) (\:animation ent))) (\:entities game))" "(\:entities game)" "(\:renderable (\:entities game))" "(\:renderable (first (\:entities game)))" "(filter (fn [ent] (and (\:renderable ent) (\:animations ent))) (\:entities game))" "(remove (fn [ent] (and (\:renderable ent) (\:animations ent))) (\:entities game))" "(let [ent (first (\:entities game))]\\n  ent)" "(let [ent (first (\:entities game))]\\n  (if (\:is-playing (\:animations ent))\\n    true\\n    false))" "(let [ent (first (\:entities game))]\\n  (let [animation-state (case (\:state ent)\\r\\n                          \:idle \:pistol-idle\\r\\n                          \:firing \:pistol-firing)\\r\\n        animations (animation-state (get-in ent [\:animations \:tex-and-durs]))]\\n    animations))" "(let [ent (first (\:entities game))]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (>\= inc-frame (count (animation-state (\:animations ent))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (println next-frame)))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-idle]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (>\= inc-frame (count (animation-state (\:animations ent))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (println next-frame)))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (>\= inc-frame (count (animation-state (\:animations ent))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (println next-frame)))" "game" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (>\= inc-frame (count (animation-state (\:animations ent))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (println inc-frame)))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (>\= inc-frame (count (animation-state (\:animations ent))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (println (count (animation-state (\:animations ent))))))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (println next-frame)))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (println next-frame)))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count 1))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (animation-state (\:tex-and-durs (\:animations ent)))))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count []))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (animation-state (\:tex-and-durs (\:animations ent)))))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count []))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (count (animation-state (\:tex-and-durs (\:animations ent))))))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))\\r\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                       next-duration-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (count (animation-state (\:tex-and-durs (\:animations ent))))))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))]\\r\\n                   next-texture-idx))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))]\\r\\n                   next-frame))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- 1 (* 2 next-frame)))]\\r\\n                   next-texture-idx))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))]\\r\\n                   next-texture-idx))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)]\\r\\n                   next-texture))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)]\\r\\n                   next-frame))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)]\\r\\n                   next-frame))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)]\\r\\n                   next-texture))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\n                       next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   next-duration))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire]\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                       next-frame (if (> inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                    0\\r\\n                                    inc-frame)\\r\\n                       next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\n                       next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\n                       next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n                       next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                   (-> ent\\n                     (assoc-in [\:animations \:current-frame] next-frame)\\n                     (assoc-in [\:animations \:current-duration] next-duration)\\n                     (assoc \:renderable next-texture))))" "(ns animation.main-screen)" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(ns animation.main-screen)" "(do \\r\\n         (update-game\! \#((assoc % \:delta delta)))\\r\\n         (update-game\! \#(game-loop %)))" "(do \\r\\n         (update-game\! \#((assoc % \:delta 1)))\\r\\n         (update-game\! \#(game-loop %)))" "\\r\\n         (update-game\! \#((assoc % \:delta 1)))" "(assoc {} \:delta 1)" "(update-game\! \#(assoc {} \:delta delta))" "(update-game\! \#(assoc {} \:delta 1))" "(update-game\! \#(assoc % \:delta 1))" "(ns animation.main-screen)" "(\:delta game)" "(use 'animation.main-screen \:reload)" "(animate-pistoleer-system game)" "(let [ents (\:entities game)]\\n  (mapv (fn [ent]\\r\\n              (if (\:is-playing (\:animations ent))\\r\\n                (let [animation-state (case (\:state ent)\\r\\n                                      \:idle \:pistol-idle\\r\\n                                      \:firing \:pistol-firing)\\r\\n                      animations (animation-state (get-in ent [\:animations \:tex-and-durs]))]\\r\\n                  (if (neg? (\:current-duration (\:animations ent)))\\r\\n                    (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                          next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                       0\\r\\n                                       inc-frame)\\r\\n                          next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                          next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                          next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n                          next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                      (-> ent\\r\\n                     (assoc-in [\:animations \:current-frame] next-frame)\\r\\n                     (assoc-in [\:animations \:current-duration] next-duration)\\r\\n                     (assoc \:renderable next-texture)))\\r\\n                    (assoc-in ent [\:animations \:current-duration] (- (get-in ent [\:animations \:current-duration]) (\:delta game)))))\\r\\n                ent))\\r\\n           ents))" "(let [ents (\:entities game)]\\n  (mapv (fn [ent]\\r\\n              ent)\\r\\n           ents))" "(\:entites game)" "(\:entities game)" "game" "(animation.desktop-launcher/reset)" "game" "(if (\:is-playing (\:animations ent))\\r\\n                (let [animation-state (case (\:state ent)\\r\\n                                      \:idle \:pistol-idle\\r\\n                                      \:firing \:pistol-firing)\\r\\n                      animations (animation-state (get-in ent [\:animations \:tex-and-durs]))]\\r\\n                  (if (neg? (\:current-duration (\:animations ent)))\\r\\n                    (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n                          next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                                       0\\r\\n                                       inc-frame)\\r\\n                          next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n                          next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n                          next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n                          next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n                      (-> ent\\r\\n                     (assoc-in [\:animations \:current-frame] next-frame)\\r\\n                     (assoc-in [\:animations \:current-duration] next-duration)\\r\\n                     (assoc \:renderable next-texture)))\\r\\n                    (assoc-in ent [\:animations \:current-duration] (- (get-in ent [\:animations \:current-duration]) (\:delta game)))))\\r\\n                ent)" "(animate-pistoleer-system game)" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(animate-pistoleer-system game)" "(assoc-in game [\:entities 0 \:animations \:state] \:firing)" "(assoc-in game [\:entities 0 \:state] \:firing)" "(assoc-in game [\:entities 0 \:animations \:is-playing] true)" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:is-playing] true))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:state] \:firing))" "(update-game\! \#(assoc-in % [\:entities 0 \:state] \:firing))" "(first (\:entities game))" "(let [ent (first (\:entities game))]\\r\\n\\t\\t\\t      (let [animation-state (case (\:state ent)\\r\\n\\t\\t\\t                            \:idle \:pistol-idle\\r\\n\\t\\t\\t                            \:firing \:pistol-firing)\\r\\n\\t\\t\\t            animations (animation-state (get-in ent [\:animations \:tex-and-durs]))]\\r\\n\\t\\t\\t        (if (neg? (\:current-duration (\:animations ent)))\\r\\n\\t\\t\\t          (update-animation-and-render-comps ent animation-state)\\r\\n\\t\\t\\t          (assoc-in ent [\:animations \:current-duration] (- (get-in ent [\:animations \:current-duration]) (\:delta game))))))" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(let [ent (first (\:entities game))]\\r\\n\\t\\t\\t      (let [animation-state (case (\:state ent)\\r\\n\\t\\t\\t                            \:idle \:pistol-idle\\r\\n\\t\\t\\t                            \:firing \:pistol-firing)\\r\\n\\t\\t\\t            animations (animation-state (get-in ent [\:animations \:tex-and-durs]))]\\r\\n\\t\\t\\t        (if (neg? (\:current-duration (\:animations ent)))\\r\\n\\t\\t\\t          (update-animation-and-render-comps ent animation-state)\\r\\n\\t\\t\\t          (assoc-in ent [\:animations \:current-duration] (- (get-in ent [\:animations \:current-duration]) (\:delta game))))))" "game" "(use 'animation.main-screen \:reload)" "game" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(ns animation.main-screen)" "(animate-pistoleer-system game)" "(-> game\\r\\n    (animate-pistoleer-system)\\r\\n    (render-system))" "(animation.desktop-launcher/run-on-main-thread \\n  (fn [] (-> game\\r\\n           (animate-pistoleer-system)\\r\\n           (render-system))))" "(animation.desktop-launcher/run-on-main-thread \\n(time  (fn [] (-> game\\r\\n           (animate-pistoleer-system)\\r\\n           (render-system)))))" "(do \\n  (use 'animation.main-screen \:reload)\\n  (animation.desktop-launcher/reset))" "game" "(ns animation.main-screen)" "(animate-pistoleer-system game)" "(concat {} {})" "(concat {\:1 1} {\:2 2})" "(update-anim-ents (\:entities game))" "(concat [] (update-anim-ents \:entities game))" "(concat [] (update-anim-ents (\:entities game))" "(concat [] (update-anim-ents (\:entities game)))" "(vec (concat [] (update-anim-ents (\:entities game))))" "(filterv (fn [ent] (not (and (\:renderable ent) (\:animation ent)))) (\:entities game))" "(filterv (fn [ent] (and (\:renderable ent) (\:animation ent))) (\:entities game))" "(\:renderable (first (\:entities game)))" "(first (\:entities game))" "(filterv (fn [ent] (and (\:renderable ent) (\:animations ent))) (\:entities game))" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(animate-pistoleer-system game)" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(animate-pistoleer-system game)" "(-> game\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:is-playing] true))" "(-> game\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:state] \:firing))" "(update-game\! \#(assoc-in % [\:entities 0 \:state] \:firing))" "(-> game\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system)\\n  (animate-pistoleer-system))" "(def e (first (\:entities game)))" "e" "(case (\:state e)\\r\\n\\t\\t\\t                            \:idle \:pistol-idle\\r\\n\\t\\t\\t                            \:firing \:pistol-firing)" "(\:pistol-firing (get-in ent [\:animations \:tex-and-durs]))" "(\:pistol-firing (get-in e [\:animations \:tex-and-durs]))" "e'" "e" "(\:pistol-firing (get-in e [\:animations \:tex-and-durs]))" "(get-in e [\:animations \:tex-and-durs])" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(update-game\! \#(assoc-in % [\:entities 0 \:state] \:firing))" "game" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:is-playing] true))" "(ns animation.main-screen)" "(update-game\! \#(assoc-in % [\:entities 0 \:state] \:firing))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:is-playing] true))" "(animate-pistoleer-system game)" "(let [ent (first (\:entities game))]\\n  (inc (\:current-frame (\:animations ent))))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n      next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                   0\\r\\n                   inc-frame)\\r\\n      next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n      next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n      next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n      next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\n  )" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n      next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                   0\\r\\n                   inc-frame)\\r\\n      next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n      next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n      next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n      next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\n  next-texture)" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n      next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                   0\\r\\n                   inc-frame)\\r\\n      next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n      next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n      next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n      next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\n  (-> ent\\r\\n   (assoc-in [\:animations \:current-frame] next-frame)\\r\\n   (assoc-in [\:animations \:current-duration] next-duration)\\r\\n   (assoc \:renderable next-texture)))" "(update-game\! \#((animate-pistoleer-system %)))" "(update-game\! \#(animate-pistoleer-system %))" "(let [ent (first (\:entities game))\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n        next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n        next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n    (-> ent\\r\\n   (assoc-in [\:animations \:current-frame] next-frame)\\r\\n   (assoc-in [\:animations \:current-duration] next-duration)\\r\\n   (assoc \:renderable next-texture)))" "(update-game\! \#((animate-pistoleer-system %)))" "(update-game\! \#(animate-pistoleer-system %))" "(do \\n  (update-game\! \#(animate-pistoleer-system %))\\n  (update-game\! \#(animate-pistoleer-system %))\\n  (update-game\! \#(animate-pistoleer-system %))\\n  (update-game\! \#(animate-pistoleer-system %))" "(update-game\! \#(animate-pistoleer-system %))" "(update-game\! \#(assoc % {\:batch\\r\\n \#<SpriteBatch com.badlogic.gdx.graphics.g2d.SpriteBatch@4c405e5f>,\\r\\n \:tex-cache\\r\\n {\:pistol-fire\\r\\n  [\#<AtlasRegion fire pistol00>\\r\\n   0.1\\r\\n   \#<AtlasRegion fire pistol01>\\r\\n   0.1\\r\\n   \#<AtlasRegion fire pistol02>\\r\\n   0.1\\r\\n   \#<AtlasRegion pistol idle>\\r\\n   0.1],\\r\\n  \:pistol-idle\\r\\n  [\#<AtlasRegion pistol idle> 0.1],\\r\\n  \:wall [\#<AtlasRegion wall> 0.1],\\r\\n  \:floor [\#<AtlasRegion floor> 0.1],\\r\\n  \:tracer [\#<AtlasRegion tracer> 0.1]},\\r\\n \:inputs {\:mouse-x 185, \:mouse-y 269},\\r\\n \:entities\\r\\n [{\:transform\\r\\n   {\:x 50, \:y 50, \:rotation 0},\\r\\n   \:animations\\r\\n   {\:tex-and-durs\\r\\n    {\:pistol-idle\\r\\n     [\#<AtlasRegion pistol idle> 0.1],\\r\\n     \:pistol-fire\\r\\n     [\#<AtlasRegion fire pistol00>\\r\\n      0.1\\r\\n      \#<AtlasRegion fire pistol01>\\r\\n      0.1\\r\\n      \#<AtlasRegion fire pistol02>\\r\\n      0.1\\r\\n      \#<AtlasRegion pistol idle>\\r\\n      0.1]},\\r\\n    \:is-playing true,\\r\\n    \:current-frame 3,\\r\\n    \:current-duration\\r\\n    8.963085711002905E-5},\\r\\n   \:renderable\\r\\n   \#<AtlasRegion pistol idle>,\\r\\n   \:state \:firing}],\\r\\n \:delta 0.01665494\\r\\n})" "game" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n        next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n        next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n    (-> ent\\r\\n   (assoc-in [\:animations \:current-frame] next-frame)\\r\\n   (assoc-in [\:animations \:current-duration] next-duration)\\r\\n   (assoc \:renderable next-texture)))" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n        next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n        next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n    )" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)]\\r\\n    )" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n        next-duration-idx (if (zero? next-frame) 0 (- (* 2 next-frame) 1))\\r\\n        next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n    )" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n        ]\\r\\n    )" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        ]\\r\\n    )" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        ]\\r\\n    next-texture-idx)" "(\:pistol-fire (\:tex-and-durs (\:animations (first (\:entities game)))))" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (count (animation-state (\:tex-and-durs (\:animations ent)))))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        ]\\r\\n    inc-frame)" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (/ (count (animation-state (\:tex-and-durs (\:animations ent)))) 2))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        ]\\r\\n    inc-frame)" "(let [ent (first (\:entities game))\\r\\n      animation-state \:pistol-fire\\n      inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (/ (count (animation-state (\:tex-and-durs (\:animations ent)))) 2))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        ]\\r\\n    next-frame)" "game" "(animate-pistoleer-system game)" "(use 'animation.main-screen \:reload)" "(ns animation.main-screen)" "game" "(\:entities game)" "(update-game\! \#(assoc-in % [\:entities 0 \:state] \:firing))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:is-playing] true))" "(update-game\! \#(animate-pistoleer-system %))" "(defn game-loop [game]\\r\\n  (clear-screen)\\r\\n  (-> game\\r\\n    (animate-pistoleer-system)\\r\\n    (render-system)))" "(ns animation.main-screen)" "(defn game-loop [game]\\r\\n  (clear-screen)\\r\\n  (-> game\\r\\n    (animate-pistoleer-system)\\r\\n    (render-system)))" "(defn game-loop [game]\\r\\n  (clear-screen)\\r\\n  (-> game\\r\\n    (render-system)))" "(update-game\! \#(assoc-in % [\:entities 0 \:state] \:firing))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:is-playing] true))" "(update-game\! \#(animate-pistoleer-system %))" "(animate-pistoleer-system game)" "game" "(update-game\! \#(animate-pistoleer-system %))" "(update-anim-ents game)" "game" "(animate-pistoleer-system game)" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:current-duration] .1))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:current-duration] .1f))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:current-duration] 0.1))" "(update-game\! \#(animate-pistoleer-system %))" "game" "(defn update-animation-and-render-comps [ent animation-state]\\r\\n  (let [inc-frame (inc (\:current-frame (\:animations ent)))\\r\\n        next-frame (if (>\= inc-frame (/ (count (animation-state (\:tex-and-durs (\:animations ent)))) 2))\\r\\n                     0\\r\\n                     inc-frame)\\r\\n        next-texture-idx (if (zero? next-frame) 0 (* 2 next-frame))\\r\\n        next-texture (nth (animation-state (\:tex-and-durs (\:animations ent))) next-texture-idx)\\r\\n        next-duration-idx (if (zero? next-frame) 1 (- (* 2 next-frame) 1))\\r\\n        next-duration (nth (animation-state (\:tex-and-durs (\:animations ent))) next-duration-idx)]\\r\\n    (-> ent\\r\\n   (assoc-in [\:animations \:current-frame] next-frame)\\r\\n   (assoc-in [\:animations \:current-duration] next-duration)\\r\\n   (assoc \:renderable next-texture))))" "(update-game\! \#(assoc-in % [\:entities 0 \:animations \:current-duration] 0.1))" "(update-game\! \#(animate-pistoleer-system %))" "(defn game-loop [game]\\r\\n  (clear-screen)\\r\\n  (-> game\\r\\n    (animate-pistoleer-system)\\r\\n    (render-system)))" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.05\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.05\\r\\n                       (.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(animation.desktop-launcher/reset)" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.01\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.01\\r\\n                       (.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(animation.desktop-launcher/reset)" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.01\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(animation.desktop-launcher/reset)" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.5\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.5\\r\\n                       (.findRegion atlas \\"pistol idle\\") 0.5]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(animation.desktop-launcher/reset)" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.05\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(animation.desktop-launcher/reset)"]
eclipse.preferences.version=1
