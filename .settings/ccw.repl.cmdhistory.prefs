cmdhistory=["(reset)" "(run-on-main-thread (set-main-screen))" "(use 'animation.desktop-launcher \:reload)" "(rr ss)" "(reset)" "(\:aa (\:hi \\"test\\"))" "(empty? {})" "(use 'animation.main-screen \:reload)" "(reset)" "(defn init-tex-cache \\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle00\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(defn init-tex-cache \\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\n    atlas))" "(let [a \\"hu\\"])" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle00\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(ns animation.main-screen)" "(defn create-animation-c [animation-textures should-loop]\\r\\n  \\"Creates an animation component.\\"\\r\\n  (assoc {}\\r\\n         \:name \\"animation\\"\\r\\n         \:animated animation-textures\\r\\n         \:current-frame -1 ;using negative 1 as a way to indicate that this animation has no started.\\r\\n         \:current-duration 0.0\\r\\n         \:loop should-loop\\r\\n         \:rotation -1))" "(defn create-player [tex-cache]\\r\\n  (assoc {}\\r\\n         \:tag \\"player\\"\\r\\n         \:animation (create-animation-c (\:pistol-idle tex-cache) true)))" "(defn init-tex-cache []\\r\\n  (let [atlas (TextureAtlas. \\"s.pack\\")]\\r\\n    (assoc {}\\r\\n         \:pistol-fire [(.findRegion atlas \\"fire pistol00\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol01\\") 0.1\\r\\n                       (.findRegion atlas \\"fire pistol02\\") 0.1]\\r\\n         \:pistol-idle [(.findRegion atlas \\"pistol idle00\\") 0.1]\\r\\n         \:wall [(.findRegion atlas \\"wall\\") 0.1]\\r\\n         \:floor [(.findRegion atlas \\"floor\\") 0.1]\\r\\n         \:tracer [(.findRegion atlas \\"tracer\\") 0.1])))" "(type 0.0)" "(type 0.0f)" "(ns animation.desktop-launcher)" "(use 'animation.main-screen \:reload)" "(ns animation.main-screen)" "(defn render-s [{entities \:entities batch \:batch} game]\\r\\n  (.begin batch)\\n  (loop [ents entities]\\n    (when-let [renderable (not (nil? (\:renderable ents)))]\\n      (.draw batch (\:texture renderable) (float (\:x renderable)) (float (\:y renderable))))\\n    (recur (rest ents)))\\r\\n  (.end batch)\\n  game)" "(use 'animation.main-screen \:reload)" "(ns animation.desktop-launcher)" "(reset)" "(ns animation.main-screen)" "(animation.desktop-launcher/reset)" "game" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "game" "(defn create-player [tex-cache]\\n  (assoc {}\\n         \:renderable (create-renderable-c (first (\:pistol-idle tex-cache)))))" "game" "(use 'animation.main-screen \:reload)" "(create-pistoleer (first (\:pistol-idle (\:tex-cache game))))" "(\:tex-cache game)" "game" "(animation.desktop-launcher/reset)" "game" "(create-pistoleer (first (\:pistol-idle (\:tex-cache game))))" "game" "(\:tex-cache game)" "(\:pistol-idle (\:tex-cache game))" "(first (\:pistol-idle (\:tex-cache game)))" "(create-pistoleer (first (\:pistol-idle (\:tex-cache game))))" "(create-pistoleer (\:tex-cache game))" "(update-game\!\\n  (fn [game]\\n    (assoc game \\n           \:entities [(create-pistoleer (\:tex-cache game))])))" "(use 'animation.main-screen)" "(defn game-loop [game delta]\\n  (clear-screen)\\n  (render-s game))" "(defn game-loop [game delta]\\r\\n     (clear-screen)\\r\\n     (render-s game))" "(ns animation-main-screen)" "(defn game-loop [game delta]\\r\\n     (clear-screen)\\r\\n     (render-s game))" "(ns animation.main-screen)" "(defn game-loop [game delta]\\r\\n     (clear-screen)\\r\\n     (render-s game))" "game" "(ns animation.main-screen)" "game" "(ns animation.main-screen)" "game" "(\:entities game)" "(first (\:entities game))" "(assoc-in (first (\:entities game)) [\:renderable \:x] 50)" "(assoc-in game [\:entities 0 \:renderable \:x] 50)" "(update-game\! (fn [g] (assoc-in (first (\:entities g)) [\:renderable \:x] 50)))" "(ns animation.main-screen)" "(update-game\! \#((assoc-in % [\:entities 0 \:renderable \:x] 50)))" "(update-game\! (fn [g] (assoc-in g [\:entities 0 \:renderable \:x] 50)))" "game" "(update-game\! (fn [g] (assoc-in g [\:entities 0 \:renderable \:y] 50)))" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(ns animation.main-screen)" "game" "(\:entities game)" "(use animation.main-screen \:reload)" "(use 'animation.main-screen \:reload)" "(animation.desktop-launcher/reset)" "(float 50)" "game" "(ns animation.main-screen)" "game" "(\:renderable (first (\:entities game)))" "(\:x (\:renderable (first (\:entities game))))" "(float (\:x (\:renderable (first (\:entities game)))))" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(use 'animation.main-screen \:reload)" "(reset)" "(ns animation.main-screen)" "game" "(\:tex-cache game)" "(conj [1 2 3] 4)" "(let [e {\:current-duration 1}]\\n  (assoc e\\n         \:current-duration (inc (\:current-duration e))))" "(mod 1 3)" "(mod 0 3)" "(mod 2 3)" "(mod 3 3)" "(if-let [e (first (\:entities game))\\r\\n         animation (\:animation e)\\r\\n         renderable (\:renderable e)]\\r\\n)" "(if-let [e (first (\:entities game))\\r\\n         animation (\:animation e)\\r\\n         renderable (\:renderable e)]\\r\\ne)" "(if-let [e (first (\:entities game))]\\r\\ne)" "(if-let [e (first (\:entities game))\\n         a (first (\:entities game))]\\r\\ne)" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      animation)))" "(ns animation.main-screen)" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      animation)))" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      (cond \\n        (neg? (\:current-frame animation)) \\n          (assoc animation\\n                 \:current-frame 0)))))" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      (cond \\n        (neg? (\:current-frame animation)) \\n          (assoc animation\\n                 \:current-frame 0)\\n        (> 0 (\:current-duration animation))\\n          (assoc animation\\n                 \:current-duration 1)\\n          ))))" "game" "(assoc-in [\:entities 0 \:animation \:current-frame] 0)" "(assoc-in game [\:entities 0 \:animation \:current-frame] 0)" "(let [e (first (\:entities game))]\\n  (if-let [animation (\:animation e)]\\n    (if-let [renderable (\:renderable e)]\\n      (cond \\n        (neg? (\:current-frame animation)) \\n          (assoc animation\\n                 \:current-frame 0)\\n        (> 0 (\:current-duration animation))\\n          (assoc animation\\n                 \:current-duration 1)\\n          ))))" "game" "(update-game\! \#(assoc-in % [\:entities 0 \:animation \:current-frame] 0))" "game" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc animation\\r\\n                 \:current-frame 0)\\r\\n        (> 0 (\:current-duration animation))\\r\\n          (assoc animation\\r\\n                 \:current-duration 1)\\r\\n          ))))" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc animation\\r\\n                 \:current-frame 0)\\r\\n        (>\= 0 (\:current-duration animation))\\r\\n          (assoc animation\\r\\n                 \:current-duration 1)\\r\\n          ))))" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc-in game [\:entities 0 \:animation \:current-frame] 0)\\r\\n        (>\= 0 (\:current-duration animation))\\r\\n          (assoc-in game [\:entities 0 \:animation \:current-duration] 1)\\r\\n          ))))" "(update-game\! \#(assoc-in % [\:entities 0 \:animation \:current-duration] 0))" "(let [e (first (\:entities game))]\\r\\n  (if-let [animation (\:animation e)]\\r\\n    (if-let [renderable (\:renderable e)]\\r\\n      (cond \\r\\n        (neg? (\:current-frame animation)) \\r\\n          (assoc-in game [\:entities 0 \:animation \:current-frame] 0)\\r\\n        (>\= 0 (\:current-duration animation))\\r\\n          (assoc-in game [\:entities 0 \:animation \:current-duration] 1)\\r\\n          ))))" "(loop [ents (\:entities game)\\n       updated-ents []]\\n  (if (empty? ents)\\n    updated-ents\\n    (let [e (first (ents))]\\n      (if-let [animation (\:animation e)]\\n        (if-let [renderable (\:renderable e)]\\n          (cond\\n            (neg? (\:current-frame animation))\\n              (recur (rest ents)\\n                     (conj updated-ents\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\n            (<\= 0 (\:current-duration animation))\\n              (recur (rest ents)\\n                     (conj updated-ents\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\n                                       [\:animation \:current-duration] \\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(\:entities game)" "(ns animation.main-screen)" "(\:entities game)" "(loop [ents entities\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents) nil)\\r\\n;                     (conj updated-ents\\r\\n;                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents) nil)))))))\\r\\n;                     (conj updated-ents\\r\\n;                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n;                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n;                                       [\:animation \:current-duration] \\r\\n;                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)])))))" "(let [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)])))))" "(let [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)] e)))))" "(let [ents (\:entities game)\\n      updated-ents []]\\n  ents)" "(let [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first (ents))]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)] e)))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "game" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(update-game\! \#(assoc-in % [\:entities 0 \:animation \:current-frame] 0))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) (inc new-frame-num))))))))))))" "(loop [ents (\:entities game)\\r\\n       updated-ents []]\\r\\n  (if (empty? ents)\\r\\n    updated-ents\\r\\n    (let [e (first ents)]\\r\\n      (if-let [animation (\:animation e)]\\r\\n        (if-let [renderable (\:renderable e)]\\r\\n          (cond\\r\\n            (neg? (\:current-frame animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (assoc-in e [\:animation \:current-frame] 0)))\\r\\n            (<\= 0 (\:current-duration animation))\\r\\n              (recur (rest ents)\\r\\n                     (conj updated-ents\\r\\n                           (let [new-frame-num (mod (inc (\:current-frame animation)) (count (\:animations animation)))]\\r\\n                             (assoc-in (assoc-in e [\:animation \:current-frame] new-frame-num) \\r\\n                                       [\:animation \:current-duration] \\r\\n                                       (nth (\:animations animation) new-frame-num)))))))))))" "(nth [0 1 2 3] 1)" "0, 1"]
eclipse.preferences.version=1
